#!/bin/bash

base=$(cd ${0%/*}/..; pwd)

file=$1
output_loc=$SS_OUT
config="$SS_CONFIG"/properties.json
trait_dir=bytrait
chr_dir=bychr
snp_dir=bysnp

docker_output_loc="$output_loc"

filename=$(basename $file)
name=$(echo $filename | cut -f 1 -d '.')
trait=$(echo "$name" | cut -d"-" -f3)

report_file="$base/Report.txt"
report_failed_file="$base/Failed.txt"

if [ -z $file ]; then
    echo "Need to provide the file"
    exit
fi

if [ -z $output_loc ]; then
    output_loc="/output"
    echo "Setting default output location as /output ..."
fi

if [ -z $config ]; then
    echo "Need to provide the config file"
    exit
fi

if [ -z $trait_dir ]; then
    trait_dir="bytrait"
    echo "Setting default trait directory as bytrait..."
fi

if [ -z $chr_dir ]; then
    chr_dir="bychr"
    echo "Setting default chromosome directory as bychr..."
fi

if [ -z $snp_dir ]; then
    snp_dir="bysnp"
    echo "Setting default snp directory as bysnp..."
fi

function wait_job_completion(){
    # check to see if jobs finished or not
	count=$(bjobs -g /sumstatsloader | wc -l)

	while [ "$count" -gt "0" ]; do
		echo "Jobs are still running, waiting..."
		sleep 60
		count=$(bjobs -g /sumstatsloader | wc -l)
	done
}

function file_health_check(){
    # check to see if any files where corrupted
	echo "Checking to see if the files are corrupted, please wait a moment..."
	echo ""
	$base/bin/failure/check_files_corrupted.sh $docker_output_loc $trait_dir $chr_dir $snp_dir $report_failed_file
}

times_looped=0

while true; do
	times_looped=$(( times_looped + 1 ))
	if [ $times_looped -gt 3 ]; then
		echo "Jobs have been submitted 3 times without being able to load!"
		cat $report_file $report_failed_file | mail -s "File $file failed to load" olgavrou@ebi.ac.uk
		exit 1
	fi

	wait_job_completion
    file_health_check

	echo "$name" >> $report_file
	echo -e "file\truntime\tdisk\tlines\tmaxmem\tmaxswap" >> $report_file
	echo "" >> $report_file

	$base/bin/failure/find_errors_in_load.sh $file trait $report_file $report_failed_file $output_loc $trait_dir
	$base/bin/failure/find_errors_in_load.sh $file chr $report_file $report_failed_file $output_loc $chr_dir
	$base/bin/failure/find_errors_in_load.sh $file snp $report_file $report_failed_file $output_loc $snp_dir


	echo "------------" >> $report_file
	echo "" >> $report_file

	if [ ! -s $report_failed_file ]; then
		# file with failed jobs is empty
        	echo "Done loading file!"
		break
	else
	    # resubmit any jobs that failed
		$base/bin/failure/submit_failed_jobs.sh $file $report_file $report_failed_file $output_loc $config $trait_dir $chr_dir $snp_dir
	fi
done

# delete output files
rm -f $base/snp_output*
rm -f $base/snp_error*
rm -f $base/chr_output*
rm -f $base/chr_error*
rm -f $base/trait_output*
rm -f $base/trait_error*

# files loaded, take fresh backup
cat $base/backup.txt >> $base/bk_backup.txt
> $base/backup.txt

bsub -K -g "/sumstatsbackup" -o $base/backup.txt -e $base/backup.txt "singularity exec docker://ebispot/sumstats:latest $base/bin/utils/backup.sh $docker_output_loc $trait_dir $chr_dir $snp_dir"
#bsub -K -g "/sumstatsbackup" -o $base/backup.txt -e $base/backup.txt -a 'docker('$base'/sumstatscdf.yml)' "/scripts/utils/backup.sh $docker_output_loc $trait_dir $chr_dir $snp_dir"

cat $report_file $base/backup.txt | mail -s "File $file loaded" olgavrou@ebi.ac.uk

# set correct permissions for the rest of the users
chmod -R g+rw $SS_OUT